{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#what-is-bubify","title":"What is Bubify?","text":"<p>Bubify is a web application with two main components: queue management and progress tracking.</p> <p>The purpose of the queue management component is to handle students queueing to get access to teachers or teaching assistants (TAs) in a lab session: students add themselves to a queue, teachers and TAs can see who is queuing, where the students are seated, and what they want help with, and claim entries in the queue in any order. Students can see who else is queueing and their place in the queue.</p> <p>The progress tracking component has been constructed with mastery learning in mind, but is general enough to work with any kinds of assignments or tasks. Here, students are supposed to demonstrate mastery of some goals (about 50\u201370 in the course for which Bubify was originally developed), and can track their progress and velocity. A special version of the queue management component is used to request and manage demonstrations, and at the end of a demonstration, teachers and TAs record goal fulfilment in a simple and efficient workflow, and results become visible to the students immediately.</p>"},{"location":"#who-is-using-bubify","title":"Who is using Bubify?","text":"<p>Bubify is used by several courses in computer science at Uppsala Univeristy, serving 1000+ students so far.</p> <p>Some comments from course evaluations (*) when students where asked to point out good aspects of the course:</p> <p>Quote</p> <p>Bubify. Awesome Bubify. It has been so incredibly satisfying to see my progress all the time ...</p> <p>Quote</p> <p>Bubify, have all courses use one for presentations and assistance. So much better than all the other options I've come across ...</p> <p>* = translated from Swedish and updated old name to current</p>"},{"location":"#what-does-the-word-bubify-mean","title":"What Does the Word Bubify Mean?","text":"<p>The latin word for the Eurasian eagle-owl is Bubo bubo and Bubify is simply a nominalization in honour of this beautiful animal.</p>"},{"location":"development/","title":"Installing Bubify for Development","text":""},{"location":"development/#prerequsites","title":"Prerequsites","text":"<p>You need to have Docker installed and at least 4 GB of memory.</p>"},{"location":"development/#macos","title":"macOS","text":"<p>If you use macOS and can't use Docker Desktop due to their updated licence you may use OrbStack instead.</p>"},{"location":"development/#installing","title":"Installing","text":"<p>Clone the project: <pre><code>git clone --recurse-submodules https://github.com/bubify/bubify-docker.git\n</code></pre></p> <p>Then go into the <code>bubify-docker</code> folder get the latest updates <pre><code>cd bubify-docker &amp;&amp; make update\n</code></pre></p> <p>Additionally, copy the environment template for development. There should be no need to change them. <pre><code>cp .env.development.template .env.development\n</code></pre></p> <p>You can now build the docker compose project and start it as a deamon. The frontend can be accessed at http://localhost:3000. <pre><code>make build-development\nmake up-development\n</code></pre></p> <p>You may continuously track the logs for the frontend and backend</p> <pre><code>docker logs -f bubify-backend\ndocker logs -f bubify-frontend\n</code></pre> <p>Tip</p> <p>Setup a <code>tmux</code> session that tracks the logs in split screen</p> <p>You may now run the initial setup wizard. But note that the backend server must have finished its initial initalization. <pre><code>make setup\n</code></pre></p> <p>You may also optionally populate with development users (to avoid the need for using CAS) and sample achievements. <pre><code>make add-user\nmake add-achievement\n</code></pre></p> <p>Note that data that is used is found in <code>backend/toolbox/achievements.csv</code> and <code>backend/toolbox/users.csv</code>.</p> <p>Warning</p> <p>Do not run <code>add-user</code> or <code>add-achievement</code> before <code>setup</code> as this might corrupt your installation state</p> <p>If achievements or new users are not appearing in the frontend try clearing your browser's cache and restarting the backend with</p> <pre><code>make restart-backend\n</code></pre> <p>If you wish to stop the containers you can do so with <pre><code>make down-development\n</code></pre></p>"},{"location":"development/#cleaning","title":"Cleaning","text":"<p>If something goes terribly wrong you might want to reset everything with <pre><code>make clean\n</code></pre></p> <p>If you just want to reset the database you may instead use <pre><code>make clean-db\n</code></pre></p> <p>Note that both will stop your containers, so you need to type <code>make up-development</code> again.</p>"},{"location":"development/#run-tests-using-docker","title":"Run Tests Using Docker","text":"<p>To run the test suite in a Docker container, choose one of the following build rules, depending on what testing level you are targeting (both, unit or integration):</p> <p><pre><code>make build-testing\n</code></pre> <pre><code>make build-testing-unit\n</code></pre> <pre><code>make build-testing-integration\n</code></pre></p> <p>Launch container and start tests: <pre><code>make up-testing\n</code></pre></p> <p>Test results are printed directly into the Logs page for the <code>bubify-backend-testing</code> container and may also be examined afterwards in the your local <code>backend/test-reports/</code> folder. Unit test results are found in the <code>surefire-reports</code> folder, integration tests in <code>failsafe-reports</code> folder and code coverage for the executed test scope in <code>jacoco</code> folder.</p> <p>Stop test container: <pre><code>make down-testing\n</code></pre></p>"},{"location":"development/#reset-test-suite","title":"Reset test suite","text":"<p>If something goes terribly wrong you might want to reset everything (including your Docker containers) with <pre><code>make clean\n</code></pre></p> <p>Note that this will stop all containers, so you need to type <code>make up-testing</code> again.</p>"},{"location":"development/#run-tests-locally","title":"Run tests locally","text":"<p>If you prefer you can also run the tests directly in the <code>backend</code> folder.</p> <p>To run the full test suite on your machine change directory to <code>./backend</code> and: <pre><code>make test\n</code></pre></p> <p>To run units test only on your machine: <pre><code>make test-unit\n</code></pre></p> <p>To run integration tests on your machine: <pre><code>make test-integration\n</code></pre></p> <p>Test results are printed directly into your terminal and may also be examined afterwards in your local <code>backend/target/</code> folder. Unit test results are found in the <code>surefire-reports</code> folder, integration tests in <code>failsafe-reports</code> folder and code coverage for the executed test scope in <code>jacoco</code> folder.</p>"},{"location":"development/#contribute-by-adding-more-tests","title":"Contribute by adding more tests","text":"<p>The test suite currently covers all classes in the <code>models</code> and <code>repository</code> folders for unit tests. For integration tests, some classes in the <code>controllers</code> folder are targeted. To contribute and expand the suite to cover all APIs, navigate to the <code>backend/src/test/java/com/uu/au/api/</code> folder and create a new test class. Good to know before you get started:</p> <ul> <li>Class names must include <code>IT</code> for them to be identified and run as integration tests.</li> <li>The <code>@DirtiesContext</code> annotation ensures the Spring Boot app and database are restarted between each test. Note that the DB is always wiped between tests.</li> <li>Make sure to copy the <code>setup</code> method from another IT class and inject the <code>TestHelper</code> in your class. These two together ensure each test is initiated by creating a course, user, and retrieving the necessary token to authenticate to Bubify.</li> <li><code>TestHelper</code> also helps you populate and retrieve data from the database through API calls stored in various methods. Feel free to use these and expand the <code>TestHelper</code> with more methods as necessary.</li> </ul>"},{"location":"features/","title":"Features","text":"<p>Bubify uses a responsive design and is friendly for both desktops and mobile.</p>"},{"location":"features/#student","title":"Student","text":""},{"location":"features/#burndown-chart-and-progress-tracking","title":"Burndown Chart and Progress Tracking","text":"<p> For courses with a lot of achievements/tasks, Bubify provides the students a tool to visualize their progress and at what pace they need to keep in order to earn a grade given a certain date. The grade and date is configurable by the student.</p>"},{"location":"features/#list-of-passed-achievements","title":"List of Passed Achievements","text":"<p> Bubify also provide students a filterable list to browse what achievements/tasks remains. Courses may also optionally use \"pushbacks\" for achievements/tasks, where the student get blocked from undertaking a demonstration for that achievements/tasks for 24 hours.</p>"},{"location":"features/#queue-demonstrate","title":"Queue: Demonstrate","text":"<p> Students can search with autocomplete what achievements/tasks they wish to demonstrate and may add other students to their request.</p>"},{"location":"features/#queue-help","title":"Queue: Help","text":"<p> There is also a help list. Courses may allow for a hybrid mode where students are allowed to use Zoom if they cannot attend. It is also possible to only allow physical requests or only requests with Zoom.</p>"},{"location":"features/#teacher","title":"Teacher","text":""},{"location":"features/#queue-demonstrate_1","title":"Queue: Demonstrate","text":"<p> First time a student demonstrates you verify that the profile picture is acceptable, for example by requiring valid identification. A student may only reupload a new profile picture if a teacher revokes it. This ensures that it is not possible to let someone else demonstrate on your behalf.</p>"},{"location":"features/#queue-help_1","title":"Queue: Help","text":"<p> Teachers will have a clear view of who has waited for help the longest, where they are located and if they have some special request.</p>"},{"location":"features/#statistics-quality-of-service","title":"Statistics: Quality of Service","text":"<p>Head teachers may find it useful to have live statistics at their disposal to understand if the course is running smoothly.</p>"},{"location":"hack/","title":"Hack","text":"<p>Link to introduction tutorial for Hackathon!</p> <p>L\u00f6sa id\u00e9er p\u00e5 vad man kan kika p\u00e5 efter tutorial:</p> <ul> <li> <p>Statiskt kompilera in rum (som config-fil)</p> </li> <li> <p>Kan b\u00f6rja med att ha det i settings (och cache:a s\u00e5 att det inte \u00e4r databasuppslagningar varje g\u00e5ng)</p> </li> <li> <p>Stage:a databas-commits vid import av partiella resultat</p> </li> <li> <p>Cache:a QoS-statistik ist\u00e4llet f\u00f6r att r\u00e4kna ut var femte sekund per klient</p> </li> <li> <p>S\u00e4tt en godtycklig tid f\u00f6r att rensa k\u00f6erna</p> </li> <li> <p>Filtrera vilka m\u00e5l som kommer med i burndown</p> </li> <li> <p>Kan f\u00f6rst vara n\u00e5got som s\u00e4tts av l\u00e4rare</p> </li> <li> <p>M\u00f6jligg\u00f6r b\u00e4ttre planering f\u00f6r studenter senare</p> </li> <li> <p>Unifierad lista f\u00f6r hj\u00e4lp och demonstration</p> </li> <li> <p>Mer generellt st\u00f6d f\u00f6r olika sorters listor</p> </li> <li> <p>Visa bild (avatar?) n\u00e4r man claimar en student, respektive TAn f\u00f6r studenten n\u00e4r hen blir claimad</p> </li> <li> <p>Fler sorters statistik att r\u00e4kna ut</p> </li> <li> <p>Hitta studenter som... (inte har loggat in p\u00e5 l\u00e4nge, inte har tagit m\u00e5l, etc.)</p> </li> <li> <p>Visa relevant kontaktinformation f\u00f6r att till exempel kunna mejla</p> </li> <li> <p>Daglig statistik om hur m\u00e5nga m\u00e5l som har tagits etc.</p> </li> </ul>"},{"location":"production/","title":"Deploying Bubify for Production","text":""},{"location":"production/#prerequsites","title":"Prerequsites","text":"<p>You need to have Docker installed and at least 4 GB of memory during building. We recommend only deploying on Linux hosts for performance reasons.</p>"},{"location":"production/#installing","title":"Installing","text":"<p>Clone the project: <pre><code>git clone --recurse-submodules https://github.com/bubify/bubify-docker.git\n</code></pre></p> <p>Then go into the <code>bubify-docker</code> folder get the latest updates <pre><code>cd bubify-docker &amp;&amp; make update\n</code></pre></p> <p>Additionally, copy the environment template for production. <pre><code>cp .env.production.template .env.production\n</code></pre></p> <p>In <code>.env.production</code> you need to change all occurrences of <code>example.com</code> to your own domain. For <code>https</code> you have three choices: (1) use own certificate, (2) use <code>certbot</code> for using free Let\u2019s Encrypt certificates or (3) let another reverse-proxy handle encryption.</p> <p>Here is how to resolve these strategies:</p> <ol> <li>In <code>docker-compose.yml</code> uncomment and change <code>- my_domain.crt:/home/bubify/ssl.crt</code> and <code>- my_domain.ssl:/home/bubify/ssl.key</code> to point to your own</li> <li>Here is one example of how <code>certbot</code> can be used</li> <li>Should work out of the box. Just point the other reverse proxy at port 80 on your Docker host.</li> </ol> <p>Unless you uncomment and link in your own certificates the default generated certificate is used which is valid for <code>localhost</code>. This is to allow ease of use when testing production environment on a developer machine.</p> <p>After you have resolved the certificate can now build the docker compose project and start it as a deamon <pre><code>make build-production\nmake up-production\n</code></pre></p> <p>You may continuously track the logs for the frontend and backend</p> <pre><code>docker logs -f bubify-backend\ndocker logs -f bubify-frontend\n</code></pre> <p>You may now run the initial setup wizard. But note that the backend server must have finished its initial initalization. <pre><code>make setup\n</code></pre></p> <p>You may also populate with users and achievements. Replace <code>backend/toolbox/achievements.csv</code> and <code>backend/toolbox/users.csv</code> with your own configuration. <pre><code>make add-user\nmake add-achievement\n</code></pre></p> <p>Warning</p> <p>Do not run <code>add-user</code> or <code>add-achievement</code> before <code>setup</code> as this might corrupt your installation state</p> <p>If achievements or new users are not appearing in the frontend try clearing your browser's cache and restarting the backend with</p> <p>If you wish to stop the containers you can do so with <pre><code>make down-production\n</code></pre></p>"},{"location":"production/#cleaning","title":"Cleaning","text":"<p>Only do manual cleaning. Do not use the clean commands as these will pruge the database.</p>"},{"location":"reference/","title":"API Reference","text":""}]}